$Id: 2011q2-test1,v 1.3 2011-04-28 12:37:12-07 - - $
Answers to 2011q2-test1, page 1.

_________________________________________________________________
Question 1.

(lambda (x) (lambda (y) (* x y)))

_________________________________________________________________
Question 2.

FORTRAN: Backus; LISP: McCarthy; COBOL: Hopper; BASIC: Kemeny

_________________________________________________________________
Question 3.

/// There are thousands of answers, but a couple are:
i != 0 && n / i
i >= 0 && i < a.length && a[i] == 6

_________________________________________________________________
Question 4.

#!/usr/bin/perl
while (<STDIN>) {
   $lc++;
   $cc += length;
   $wc++ while s/\S+//;
}
printf "%7d %7d %7d\n", $lc, $wc, $cc

_________________________________________________________________
Question 5.

(define (contains pred? list)
        (cond ((null? list) #f)
              ((pred? (car list)) #t)
              (else (contains pred? (cdr list)))
))

_________________________________________________________________
Question 6.

#!/usr/bin/perl
use strict; use warnings;
my %hash;
while (my $line = <>) {
   while ($line =~ s/\w+//) { ++$hash{$&}; }
}
for my $word (sort keys %hash) {
   print "$word $hash{$word}\n";
}


Answers to 2011q2-test1, page 2.

_________________________________________________________________
Question 7.

(define (map2 fn list1 list2)
        (if (or (null? list1) (null? list2)) '()
            (cons (fn (car list1) (car list2))
                  (map2 fn (cdr list1) (cdr list2)))))

_________________________________________________________________
Question 8.

(define (foldl fn unit list)
        (if (null? list) unit
            (foldl fn (fn unit (car list)) (cdr list))))


_________________________________________________________________
Question 9.

(define (ip list1 list2)
        (foldl + 0 (map2 * list1 list2)))

_________________________________________________________________
Question 10.

Static scope uses a compile time search between {...} to
establish range of variables.  Dynamic scope pushes variables
on a global stack and pops them when exiting.

$x = 8; 
sub set { $x = 22; }
sub static {
   my $x = 6; set;
   print "static: x=$x\n";
}
sub dynamic {
   local $x = 6; set;
   print "dynamic: x=$x\n";
}
static;
dynamic;

output is:
static: x=6
dynamic: x=22

_________________________________________________________________
Question 11.

See picture.


Answers to 2011q2-test1, page 3.

 1.      (A) &&

 2.      (B) (cadr '(1 2 3))

 3.      (D) map

 4.      (C) $ O ( n ) $

 5.      (B) When the linker produces an executable image.

 6.      (C) Static scope and dynamic lifetime.

 7.      (C) Multiple functions with the same name and different
             signatures, defined in the same class.

 8.      (A) Strong and dynamic.

 9.      (C) $?

10.      (A) (f '())

11.      (B) COBOL

