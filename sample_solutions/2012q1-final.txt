$Id: 2012q1-soln3,v 1.1 2012-03-16 18:50:59-07 - - $
Answers to 2012a1-test3, page 1

Note: answers which are correct, but different from the key,
still get full points.

_________________________________________________________________
Question 1. [3]

let rec split pred list = match list with
    [] -> [], []
    | head::tail ->
      let (out1, out2) = split pred tail
      in  if pred head then (head::out1), out2
                       else out1, (head::out2)

_________________________________________________________________
Question 2. [2]

filter( _, [], []).
filter( P, [H|T], [H|U]) :- call( P, H), filter( P, T, U).
filter( P, [_|T], U) :- filter( P, T, U).

_________________________________________________________________
Question 3. [3]

(define (maxzip p l1 l2)
    (if (or (null? l1) (null? l2)) '()
        (let ((c1 (car l1))
              (c2 (car l2)))
         (if (p c1 c2) (cons c1 (maxzip p (cdr l1) (cdr l2)))
                       (cons c2 (maxzip p (cdr l1) (cdr l2)))))))

_________________________________________________________________
Question 4. [2]

$lc++, $cc+= length, $wc+= @{[m/(\S+)/g]} while <>;
print "$lc $wc $cc\n";


Answers to 2012a1-test3, page 2

_________________________________________________________________
Question 5. [1]

universal: parametric (generic, template)
           inclusion (subclassing, object-oriented)

ad hoc: conversion (coercion)
        overloading

_________________________________________________________________
Question 6. [2]

(define (exclude n list)
    (if (or (<= n 0) (null? list)) list
        (exclude (- n 1) (cdr list))))

_________________________________________________________________
Question 7. [2]

let rec exclude n list = match list with
    | _::tail when n > 0 -> exclude (n - 1) tail
    | _ -> list

_________________________________________________________________
Question 8. [2]

exclude( _, [], []).
exclude( N, L, L) :- N =< 0.
exclude( N, [H|T], U) :- M is N - 1, exclude( M, T, U).

_________________________________________________________________
Question 9. [3]

Object subclass: Find [
   Find class >> key: key array: array [
      1 to: array size do: [:index|
         (array at: index) = key ifTrue: [^ index]
      ].
      ^ nil.
   ]
]


Answers to 2012a1-test3, page 3

_________________________________________________________________
Question 10. [2]

   static class say implements Runnable {
      public void run () {
         System.out.println ("Hello");
      }
   }

_________________________________________________________________
Question 11. [2]

Stack s = new Stack.
t = s.pop(); // But pop does not set the pointer of the
underlying array to null.  So the array continues to point
at the object popped, even though it shouldn't.  It is
thus reachable but dead.
-- Many other possible explanations.

_________________________________________________________________
Question 12. [6]

Object subclass: Stack [
   |array top|
   Stack class >> new [
      ^ Stack new: 10
   ]
   Stack class >> new: size [
      ^ super new init: size
   ]
   init: size [
      top := 0.
      array := Array new: size.
   ]
   pop [
      |result|
      result := array at: top.
      top := top - 1.
      ^ result.
   ]
   push: item [
      top := top + 1.
      array at: top put: item
   ]
   empty [
      ^ top = 0.
   ]
]


Answers to 2012a1-test3, page 4

 1.    (C) [4 + 5] value.

 2.    (C) 2 sqrt

 3.    (C) 'a list -> 'a list

 4.    (C) structural

 5.    (D) zombie

 6.    (C) $_

 7.    (D) map

 8.    (B) foldl

 9.    (B) my @a;

10.    (A) int *f() {int i = 6; return &i; }

11.    (C) throw


Answers to 2012a1-test3, page 5

 1. overloading

 2. overriding

 3.    (A) currying

 4.    (D) virtual function table

 5.    (A) array

 6.    (B) monad

 7.    (B) Ocaml

 8.    (D) p + p

 9.    (C) heap

10.    (A) daemon

11.    (A) Algol 60

